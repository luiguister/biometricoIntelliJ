package org.example.Presentacion;

import com.digitalpersona.onetouch.*;
import com.digitalpersona.onetouch.capture.event.*;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import com.digitalpersona.onetouch.processing.DPFPTemplateStatus;
import com.digitalpersona.onetouch.verification.DPFPVerificationResult;
import org.example.BD.ConexionBD;
import org.example.MaterialSwing.MaterialButtomPanel;
import org.example.MaterialSwing.MaterialButtonIcon;
import org.example.MaterialSwing.MaterialPanel;

import java.awt.Color;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.Image;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class frmAsistencia extends javax.swing.JFrame {

    DefaultTableModel modelo = new DefaultTableModel();
    ConexionBD con = new ConexionBD();
    public String usuario;
    public String grupo;
    String codigoAsistencia;
    static IFormularioReceptor _formularioReceptor;
    ImageIcon iconoOk = new ImageIcon("src/Presentacion/imagenes/icons8-marca-de-verificación-14.png");
    ImageIcon iconoIndefinido = new ImageIcon("src/Presentacion/imagenes/icons8-signo-de-interrogación-14.png");
    ImageIcon iconoFail = new ImageIcon("src/Presentacion/imagenes/icons8-multiplicar-14.png");
    private JTextField textField1;

    /**
     * Creates new form frmProfesor
     */
    public frmAsistencia(IFormularioReceptor _formularioReceptor) {
        setIconImage(new ImageIcon(getClass().getResource("imagenes/logoupc.png")).getImage());
        initComponents();
        this.setLocationRelativeTo(null);
        this._formularioReceptor = _formularioReceptor;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTitulo = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        materialButtomPanel3 = new MaterialButtomPanel();
        jLabel10 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        panHuellas = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        lblImagenHuella = new javax.swing.JLabel();
        materialButtonIcon1 = new MaterialButtonIcon();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        pnl_table = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaEstudiantes = new javax.swing.JTable();
        materialPanel1 = new MaterialPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        lblGrupo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        panelTitulo.setBackground(new java.awt.Color(255, 255, 255));
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder1 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder1.setShadowSize(10);
        dropShadowBorder1.setShowRightShadow(false);
        panelTitulo.setBorder(dropShadowBorder1);

        jPanel2.setBackground(new java.awt.Color(112, 182, 32));

        jLabel18.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/imagenes/icons8-usuario-hombre-verificado-48 .png"))); // NOI18N
        jLabel18.setText("Asistencia ");
        jLabel18.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel18.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/imagenes/logoupcmediano.png"))); // NOI18N

        jPanel1.setBackground(new java.awt.Color(75, 146, 45));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 18, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel13)
                                .addGap(40, 40, 40))
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel13))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(30, 30, 30)
                                                .addComponent(jLabel18)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelTituloLayout = new javax.swing.GroupLayout(panelTitulo);
        panelTitulo.setLayout(panelTituloLayout);
        panelTituloLayout.setHorizontalGroup(
                panelTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelTituloLayout.setVerticalGroup(
                panelTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        materialButtomPanel3.setBackground(new java.awt.Color(112, 182, 32));
        materialButtomPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                materialButtomPanel3MouseClicked(evt);
            }
        });

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/imagenes/icons8-long-arrow-left-24.png"))); // NOI18N
        jLabel10.setText("Regresar");

        javax.swing.GroupLayout materialButtomPanel3Layout = new javax.swing.GroupLayout(materialButtomPanel3);
        materialButtomPanel3.setLayout(materialButtomPanel3Layout);
        materialButtomPanel3Layout.setHorizontalGroup(
                materialButtomPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(materialButtomPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel10)
                                .addContainerGap(34, Short.MAX_VALUE))
        );
        materialButtomPanel3Layout.setVerticalGroup(
                materialButtomPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(materialButtomPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(0, 13, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder2 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder2.setShowLeftShadow(true);
        dropShadowBorder2.setShowTopShadow(true);
        jPanel5.setBorder(dropShadowBorder2);

        panHuellas.setBackground(new java.awt.Color(255, 255, 255));
        panHuellas.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Huella Digital Capturada", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        panHuellas.setPreferredSize(new java.awt.Dimension(400, 270));
        panHuellas.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel4.setLayout(new java.awt.BorderLayout());
        jPanel4.add(lblImagenHuella, java.awt.BorderLayout.CENTER);

        panHuellas.add(jPanel4, java.awt.BorderLayout.CENTER);

        materialButtonIcon1.setBackground(new java.awt.Color(112, 182, 32));
        materialButtonIcon1.setForeground(new java.awt.Color(255, 255, 255));
        materialButtonIcon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/imagenes/icons8_ID_Verified_24px.png"))); // NOI18N
        materialButtonIcon1.setText("Registrar");
        materialButtonIcon1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                materialButtonIcon1ActionPerformed(evt);
            }
        });

        txtArea.setColumns(20);
        txtArea.setFont(new java.awt.Font("Lucida Sans", 1, 10)); // NOI18N
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(panHuellas, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(materialButtonIcon1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(panHuellas, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(materialButtonIcon1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1)
                                .addGap(18, 18, 18))
        );

        pnl_table.setBackground(new java.awt.Color(255, 255, 255));
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder3 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder3.setShowLeftShadow(true);
        dropShadowBorder3.setShowTopShadow(true);
        pnl_table.setBorder(dropShadowBorder3);

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(240, 240, 240), 1, true));
        jScrollPane2.setOpaque(false);

        tablaEstudiantes.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tablaEstudiantes.setForeground(new java.awt.Color(51, 51, 51));
        tablaEstudiantes.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {

                }
        ));
        tablaEstudiantes.setGridColor(new java.awt.Color(255, 255, 255));
        tablaEstudiantes.setRowHeight(20);
        tablaEstudiantes.setSelectionBackground(new java.awt.Color(112, 182, 32));
        tablaEstudiantes.setShowHorizontalLines(false);
        tablaEstudiantes.setShowVerticalLines(false);
        tablaEstudiantes.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablaEstudiantes);

        materialPanel1.setBackground(new java.awt.Color(112, 182, 32));

        jLabel19.setBackground(new java.awt.Color(112, 182, 32));
        jLabel19.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/imagenes/icons8-test-parcial-aprobado-24.png"))); // NOI18N
        jLabel19.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel19.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout materialPanel1Layout = new javax.swing.GroupLayout(materialPanel1);
        materialPanel1.setLayout(materialPanel1Layout);
        materialPanel1Layout.setHorizontalGroup(
                materialPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(materialPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel19)
                                .addContainerGap(35, Short.MAX_VALUE))
        );
        materialPanel1Layout.setVerticalGroup(
                materialPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(materialPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                                .addContainerGap())
        );

        jLabel20.setBackground(new java.awt.Color(51, 102, 0));
        jLabel20.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Lista De asistencia");
        jLabel20.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel20.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        lblGrupo.setBackground(new java.awt.Color(51, 102, 0));
        lblGrupo.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        lblGrupo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblGrupo.setText("grupo");
        lblGrupo.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        lblGrupo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout pnl_tableLayout = new javax.swing.GroupLayout(pnl_table);
        pnl_table.setLayout(pnl_tableLayout);
        pnl_tableLayout.setHorizontalGroup(
                pnl_tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnl_tableLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(pnl_tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
                                        .addGroup(pnl_tableLayout.createSequentialGroup()
                                                .addComponent(materialPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel20)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblGrupo)))
                                .addContainerGap())
        );
        pnl_tableLayout.setVerticalGroup(
                pnl_tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_tableLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(pnl_tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                        .addComponent(materialPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel20)
                                        .addComponent(lblGrupo))
                                .addGap(22, 22, 22)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(pnl_table, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24))
        );
        jPanel6Layout.setVerticalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(pnl_table, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(materialButtomPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 755, Short.MAX_VALUE))
                        .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(materialButtomPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panelTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(panelTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        if (DPFP.Lector.isStarted()) {
            DPFP.Lector.stopCapture();
            DPFP.Reclutador.clear();
        }
        Iniciar();
        start();
        CrearTabla();
        cargarTabla();
        //EstadoHuellas();

    }//GEN-LAST:event_formWindowOpened

    private void materialButtomPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_materialButtomPanel3MouseClicked
        // TODO add your handling code here:

        frmValidarProfesor frm = new frmValidarProfesor(_formularioReceptor, this, true);
        frm.usuario = usuario;
        frm.setVisible(true);
        if (DPFP.Lector.isStarted()) {
            DPFP.Lector.stopCapture();
            DPFP.Reclutador.clear();
        }

    }//GEN-LAST:event_materialButtomPanel3MouseClicked

    private void materialButtonIcon1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_materialButtonIcon1ActionPerformed
        if (DPFP.Reclutador.getTemplateStatus() == DPFPTemplateStatus.TEMPLATE_STATUS_UNKNOWN) {
            JOptionPane.showMessageDialog(this, "No hay huella que registrar", "error de registro", JOptionPane.ERROR_MESSAGE);
        } else {

            guardarAsistencia();
            cargarTabla();
            DPFP.Reclutador.clear();
            stop();
            Iniciar();
            start();
            lblImagenHuella.setIcon(null);
            txtArea.setText("Coloca tu huella");

        }
        // EstadoHuellas();
    }//GEN-LAST:event_materialButtonIcon1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Object[] opciones = {"Si", "No"};
        int eleccion = JOptionPane.showOptionDialog(this, "En realidad desea cerrar la aplicacion", "Mensaje de Confirmacion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, opciones, "Si");
        if (eleccion == JOptionPane.YES_OPTION) {
            frmValidarProfesor frm = new frmValidarProfesor(_formularioReceptor, this, true);
            frm.usuario = usuario;
            frm.setVisible(true);
            if (DPFP.Lector.isStarted()) {
                DPFP.Lector.stopCapture();
                DPFP.Reclutador.clear();
            }
        }
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmRegistroEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmRegistroEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmRegistroEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmRegistroEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmAsistencia(_formularioReceptor).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblGrupo;
    private javax.swing.JLabel lblImagenHuella;
    private MaterialButtomPanel materialButtomPanel3;
    private MaterialButtonIcon materialButtonIcon1;
    private MaterialPanel materialPanel1;
    private javax.swing.JPanel panHuellas;
    private javax.swing.JPanel panelTitulo;
    private javax.swing.JPanel pnl_table;
    private javax.swing.JTable tablaEstudiantes;
    private javax.swing.JTextArea txtArea;
    // End of variables declaration//GEN-END:variables

    //Variable que para crear el template de la huella luego de que se hallan creado las caracteriticas
// necesarias de la huella si no ha ocurrido ningun problema
    private DPFPTemplate template;
    public static String TEMPLATE_PROPERTY = "template";

    protected void Iniciar() {
        DPFP.Lector = DPFPGlobal.getCaptureFactory().createCapture();
        DPFP.Lector.addDataListener(new DPFPDataAdapter() {
            @Override
            public void dataAcquired(final DPFPDataEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("La Huella Digital ha sido Capturada");
                        ProcesarCaptura(e.getSample());
                    }
                });
            }
        });

        DPFP.Lector.addReaderStatusListener(new DPFPReaderStatusAdapter() {
            @Override
            public void readerConnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("El Sensor de Huella Digital esta Activado o Conectado");
                    }
                });
            }

            @Override
            public void readerDisconnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("El Sensor de Huella Digital esta Desactivado o no Conectado");
                    }
                });
            }
        });

        DPFP.Lector.addSensorListener(new DPFPSensorAdapter() {
            @Override
            public void fingerTouched(final DPFPSensorEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("El dedo ha sido colocado sobre el DPFP.Lector de Huella");
                    }
                });
            }

            @Override
            public void fingerGone(final DPFPSensorEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("El dedo ha sido quitado del DPFP.Lector de Huella");
                    }
                });
            }
        });

        DPFP.Lector.addErrorListener(new DPFPErrorAdapter() {
            public void errorReader(final DPFPErrorEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("Error: " + e.getError());
                    }
                });
            }
        });
    }

    public DPFPFeatureSet featuresinscripcion;
    public DPFPFeatureSet featuresverificacion;

    public void ProcesarCaptura(DPFPSample sample) {
        // Procesar la muestra de la huella y crear un conjunto de características con el propósito de inscripción.
        featuresinscripcion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);

        // Procesar la muestra de la huella y crear un conjunto de características con el propósito de verificacion.
        featuresverificacion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);

        // Comprobar la calidad de la muestra de la huella y lo añade a su reclutador si es bueno
        if (featuresinscripcion != null) {
            try {
                System.out.println("Las Caracteristicas de la Huella han sido creada");
                DPFP.Reclutador.addFeatures(featuresinscripcion);// Agregar las caracteristicas de la huella a la plantilla a crear

                // Dibuja la huella dactilar capturada.
                Image image = CrearImagenHuella(sample);
                DibujarHuella(image);

//                btnVerificar.setEnabled(true);
//                btnIdentificar.setEnabled(true);
            } catch (DPFPImageQualityException ex) {
                System.err.println("Error: " + ex.getMessage());
            } finally {

                // Comprueba si la plantilla se ha creado.
                switch (DPFP.Reclutador.getTemplateStatus()) {
                    case TEMPLATE_STATUS_READY:	// informe de éxito y detiene  la captura de huellas
                        stop();
                        setTemplate(DPFP.Reclutador.getTemplate());
                        EnviarTexto("La Plantilla de la Huella Tiene suficiente capturas");
//                        btnIdentificar.setEnabled(false);
//                        btnVerificar.setEnabled(false);
//                        btnGuardar.setEnabled(true);
//                        btnGuardar.grabFocus();
                        break;

                    case TEMPLATE_STATUS_FAILED: // informe de fallas y reiniciar la captura de huellas
                        DPFP.Reclutador.clear();
                        stop();

                        setTemplate(null);
                        JOptionPane.showMessageDialog(frmAsistencia.this, "La Plantilla de la Huella no pudo ser creada, Repita el Proceso", "Inscripcion de Huellas Dactilares", JOptionPane.ERROR_MESSAGE);
                        start();
                        break;
                }
            }
        }
    }

    public DPFPFeatureSet extraerCaracteristicas(DPFPSample sample, DPFPDataPurpose purpose) {
        DPFPFeatureExtraction extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
        try {
            return extractor.createFeatureSet(sample, purpose);
        } catch (DPFPImageQualityException e) {
            return null;
        }
    }

    public Image CrearImagenHuella(DPFPSample sample) {
        return DPFPGlobal.getSampleConversionFactory().createImage(sample);
    }

    public void DibujarHuella(Image image) {
        lblImagenHuella.setIcon(new ImageIcon(
                image.getScaledInstance(lblImagenHuella.getWidth(), lblImagenHuella.getHeight(), Image.SCALE_DEFAULT)));
        repaint();
    }

    public void EnviarTexto(String string) {
        txtArea.append(string + "\n");
    }

    public void start() {
        DPFP.Lector.startCapture();
        EnviarTexto("Utilizando el DPFP.Lector de Huella Dactilar ");
    }

    public void stop() {
        DPFP.Lector.stopCapture();
        EnviarTexto("No se está usando el DPFP.Lector de Huella Dactilar ");
    }

    public DPFPTemplate getTemplate() {
        return template;
    }

    public void setTemplate(DPFPTemplate template) {
        DPFPTemplate old = this.template;
        this.template = template;
        firePropertyChange(TEMPLATE_PROPERTY, old, template);
    }

    /**
     * Identifica a una persona registrada por medio de su huella digital y
     * luego la guarda
     */
    public void guardarAsistencia() {
        try {
            //Establece los valores para la sentencia SQL
            Connection c = con.conectar();

            //Obtiene todas las huellas de la bd
            PreparedStatement identificarStmt = c.prepareStatement("SELECT * FROM estudiante WHERE grupo_codigo=?");
            identificarStmt.setString(1, (grupo.split(":")[1]).trim());
            ResultSet rs = identificarStmt.executeQuery();

            //Si se encuentra el nombre en la base de datos
            while (rs.next()) {
                //Lee la plantilla de la base de datos
                byte templateBuffer[] = rs.getBytes("huella");
                String codigoEstudiante = rs.getString("codigo");
                String nombre = rs.getString("nombre");
                //Crea una nueva plantilla a partir de la guardada en la base de datos
                DPFPTemplate referenceTemplate = DPFPGlobal.getTemplateFactory().createTemplate(templateBuffer);
                //Envia la plantilla creada al objeto contendor de Template del componente de huella digital
                setTemplate(referenceTemplate);

                // Compara las caracteriticas de la huella recientemente capturda con la
                // alguna plantilla guardada en la base de datos que coincide con ese tipo
                DPFPVerificationResult result = DPFP.Verificador.verify(featuresverificacion, getTemplate());

                //compara las plantilas (actual vs bd)
                //Si encuentra correspondencia dibuja el mapa
                //e indica el nombre de la persona que coincidió.
                if (result.isVerified()) {
                    try {
                        //Establece los valores para la sentencia SQL
                        if (verificarAsistencia(codigoEstudiante)) {
                            JOptionPane.showMessageDialog(this, "Ya has registrado tu asistencia, pasa un dia agradable 😀");
                        } else {

                            PreparedStatement guardarStmt = c.prepareStatement("UPDATE estudiante_asistencia SET asistencia=? WHERE codigo_estudiante=? AND codigo_asistencia=?");
                            guardarStmt.setString(1, "si");
                            guardarStmt.setString(2, codigoEstudiante);
                            guardarStmt.setString(3, codigoAsistencia);

                            //Ejecuta la sentencia
                            guardarStmt.execute();
                            //crea la imagen de los datos guardado de las huellas guardadas en la base de datos
                            JOptionPane.showMessageDialog(null, "Muy bien " + nombre + " tu asistencia se registro con exito", "registro de asistencia", JOptionPane.INFORMATION_MESSAGE);

                            guardarStmt.close();
                        }
                    } catch (SQLException ex) {
                        //Si ocurre un error lo indica en la consola
                        System.err.println("Error al guardar los datos de la huella." + ex);
                    } finally {
                        con.desconectar();
                    }
                    return;
                }
            }
            //Si no encuentra alguna huella correspondiente al nombre lo indica con un mensaje
            JOptionPane.showMessageDialog(null, "No existe ningún registro que coincida con la huella", "Verificacion de Huella", JOptionPane.ERROR_MESSAGE);
            setTemplate(null);
        } catch (SQLException e) {
            //Si ocurre un error lo indica en la consola
            System.err.println("Error al identificar huella dactilar." + e.getMessage());
        } finally {
            con.desconectar();
        }
    }

    /**
     * Identifica si no hay ya una asistencia para esa persona
     *
     * @param codigoEstudiante
     * @return
     */
    public boolean verificarAsistencia(String codigoEstudiante) {

        //Establece los valores para la sentencia SQL
        Connection c = con.conectar();
        try {
            //Obtiene todas las huellas de la bd
            PreparedStatement identificarStmt = c.prepareStatement("SELECT * FROM estudiante_asistencia WHERE codigo_estudiante=? AND codigo_asistencia=?");
            identificarStmt.setString(1, codigoEstudiante);

            identificarStmt.setString(2, codigoAsistencia);

            ResultSet rs = identificarStmt.executeQuery();

            //Si se encuentra el nombre en la base de datos
            if (rs.next()) {
                if ("si".equals(rs.getString("asistencia"))) {
                    return true;
                }
                //Lee la plantilla de la base de datos

            }
        } catch (SQLException ex) {
            Logger.getLogger(frmAsistencia.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    public void CrearTabla() {
        String[] titulos = new String[]{"IDENTIFICACION", "NOMBRE", "APELLIDO", "ASISTENCIA"};
        modelo.setColumnIdentifiers(titulos);
        tablaEstudiantes.setDefaultRenderer(Object.class, new IconCellRenderer());
        tablaEstudiantes.setModel(modelo);
        tablaEstudiantes.setBackground(Color.white);
        lblGrupo.setText(grupo);

    }

    public void LimpiarTabla() {
        int filas = tablaEstudiantes.getRowCount();
        for (int i = 0; filas > i; i++) {
            modelo.removeRow(0);
        }
    }

    private void cargarTabla() {
        LimpiarTabla();
        Connection c = con.conectar();

        //Obtiene todas las huellas de la bd
        PreparedStatement buscarStmt;
        try {
            buscarStmt = c.prepareStatement("Select * from estudiante where grupo_codigo=?");
            buscarStmt.setString(1, (grupo.split(":")[1]).trim());
            ResultSet rs = buscarStmt.executeQuery();
            //objetoi que almacenara todos los usuarios
            Object[] datos = new Object[4];
            //Si se encuentra el nombre en la base de datos
            int i = 0;
            while (rs.next()) {

                //Lee la plantilla de la base de datos
                datos[0] = rs.getString("codigo");
                datos[1] = rs.getString("nombre");
                datos[2] = rs.getString("apellido");

                PreparedStatement st = c.prepareStatement("SELECT * FROM estudiante_asistencia WHERE codigo_estudiante = ? AND codigo_asistencia=?");
                st.setString(1, (String) datos[0]);
                st.setString(2, codigoAsistencia);
                ResultSet rsEM = st.executeQuery();
//                Object[] fila = new Object[2];
//
//                ImageIcon icon1 = new ImageIcon(getClass().getResource("/Recursos/img1.png")); //Ojo aquí hago referencia a una imagen que guarde dentro de un paquete en mi proyecto.
//

                if (rsEM.next()) {

                    if ("si".equals(rsEM.getString("asistencia"))) {
                        // modelo.setValueAt(fila[0] = new JLabel(iconoOk), i, 0);
                        datos[3] =new JLabel(iconoOk);
                    } else if ("no".equals(rsEM.getString("asistencia"))) {
                        //modelo.setValueAt(fila[0] = new JLabel(iconoFail), i, 0);
                        datos[3] =new JLabel(iconoFail);
                    } else {
                        //modelo.setValueAt(fila[0] = new JLabel(iconoIndefinido), i, 0);
                        datos[3] =new JLabel(iconoIndefinido);

                    }

                    //datos[3] = rsEM.getString("asistencia");
                }
                i++;
                modelo.addRow(datos);
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(frmListadoEstudiante.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}