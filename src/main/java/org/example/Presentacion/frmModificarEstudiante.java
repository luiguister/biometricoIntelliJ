package org.example.Presentacion;

import com.digitalpersona.onetouch.*;
import com.digitalpersona.onetouch.capture.event.*;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import com.digitalpersona.onetouch.processing.DPFPTemplateStatus;
import com.digitalpersona.onetouch.verification.DPFPVerificationResult;
import org.example.BD.ConexionBD;
import org.example.BD.MetodosDao;
import org.example.MaterialEfectos.MaterialColor;
import org.example.MaterialSwing.MaterialButtomPanel;
import org.example.MaterialSwing.MaterialButtonIcon;
import org.example.MaterialSwing.MaterialComboBox;
import org.example.MaterialSwing.MaterialTextField;

import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

public class frmModificarEstudiante extends javax.swing.JFrame implements IFormularioReceptor {

    public String usuario;
    public String codigoEstudiante;
    static IFormularioReceptor _formularioInstanciador;
    String grupo = null;
    ImageIcon iconoError = new ImageIcon("src/Presentacion/imagenes/icons8-error-14.png");
    ImageIcon iconoOk = new ImageIcon("src/Presentacion/imagenes/icons8-ok-14.png");
    ImageIcon iconoAlert = new ImageIcon("src/Presentacion/imagenes/icons8-atenci√≥n-14.png");

    /**
     * Creates new form frmRegistroEstudiante
     */
    public frmModificarEstudiante(IFormularioReceptor _formularioInstanciador) {
        setIconImage(new ImageIcon(getClass().getResource("imagenes/logoupc.png")).getImage());
        initComponents();
        setLocationRelativeTo(null);
        this._formularioInstanciador = _formularioInstanciador;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelContenedor = new javax.swing.JPanel();
        materialButtomPanel3 = new MaterialButtomPanel();
        jLabel10 = new javax.swing.JLabel();
        panelRegistrar = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtTelefono = new MaterialTextField();
        jLabel5 = new javax.swing.JLabel();
        txtCorreo = new MaterialTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNombre = new MaterialTextField();
        jLabel3 = new javax.swing.JLabel();
        txtApellido = new MaterialTextField();
        jLabel1 = new javax.swing.JLabel();
        txtCodigo = new MaterialTextField();
        lblIconIdentificacion = new javax.swing.JLabel();
        lblIconNombre = new javax.swing.JLabel();
        lblIconApellido = new javax.swing.JLabel();
        lblIconCorreo = new javax.swing.JLabel();
        lblIconTelefono = new javax.swing.JLabel();
        lblErrorIdentificacion = new javax.swing.JLabel();
        lblErrorNombre = new javax.swing.JLabel();
        lblErrorApellido = new javax.swing.JLabel();
        lblErrorCorreo = new javax.swing.JLabel();
        lblErrorTelefono = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        panHuellas = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        lblImagenHuella = new javax.swing.JLabel();
        btnRegistrar = new MaterialButtonIcon();
        panelPrincipal = new javax.swing.JPanel();
        txtCodigoModificacion = new MaterialTextField();
        materialButtonIcon1 = new MaterialButtonIcon();
        jLabel4 = new javax.swing.JLabel();
        lblError = new javax.swing.JLabel();
        materialButtonIcon2 = new MaterialButtonIcon();
        comboBoxTipoModificacion = new MaterialComboBox();
        panelTitulo = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        panelContenedor.setBackground(new java.awt.Color(255, 255, 255));
        panelContenedor.setMinimumSize(new java.awt.Dimension(811, 600));
        panelContenedor.setPreferredSize(new java.awt.Dimension(160, 128));

        materialButtomPanel3.setBackground(new java.awt.Color(112, 182, 32));
        materialButtomPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                materialButtomPanel3MouseClicked(evt);
            }
        });

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/imagenes/icons8-long-arrow-left-24.png"))); // NOI18N
        jLabel10.setText("Regresar");

        javax.swing.GroupLayout materialButtomPanel3Layout = new javax.swing.GroupLayout(materialButtomPanel3);
        materialButtomPanel3.setLayout(materialButtomPanel3Layout);
        materialButtomPanel3Layout.setHorizontalGroup(
                materialButtomPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(materialButtomPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel10)
                                .addContainerGap(21, Short.MAX_VALUE))
        );
        materialButtomPanel3Layout.setVerticalGroup(
                materialButtomPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(materialButtomPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(0, 14, Short.MAX_VALUE))
        );

        panelRegistrar.setBackground(new java.awt.Color(255, 255, 255));
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder1 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder1.setShowLeftShadow(true);
        dropShadowBorder1.setShowTopShadow(true);
        panelRegistrar.setBorder(dropShadowBorder1);
        panelRegistrar.setEnabled(false);
        panelRegistrar.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                panelRegistrarComponentShown(evt);
            }
        });

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos de Usuario", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLabel6.setText("Telefono:");

        txtTelefono.setEnabled(false);
        txtTelefono.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTelefonoFocusLost(evt);
            }
        });
        txtTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTelefonoActionPerformed(evt);
            }
        });
        txtTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonoKeyTyped(evt);
            }
        });

        jLabel5.setText("correo:");

        txtCorreo.setEnabled(false);
        txtCorreo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCorreoFocusLost(evt);
            }
        });
        txtCorreo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCorreoKeyTyped(evt);
            }
        });

        jLabel2.setText("Nombres:");

        txtNombre.setEnabled(false);
        txtNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNombreFocusLost(evt);
            }
        });
        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        jLabel3.setText("Apellidos:");

        txtApellido.setEnabled(false);
        txtApellido.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtApellidoFocusLost(evt);
            }
        });
        txtApellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellidoKeyTyped(evt);
            }
        });

        jLabel1.setText("Identificacion:");

        txtCodigo.setEnabled(false);
        txtCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodigoFocusLost(evt);
            }
        });
        txtCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodigoKeyTyped(evt);
            }
        });

        lblErrorIdentificacion.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblErrorIdentificacion.setForeground(new java.awt.Color(255, 0, 0));

        lblErrorNombre.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblErrorNombre.setForeground(new java.awt.Color(255, 0, 0));

        lblErrorApellido.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblErrorApellido.setForeground(new java.awt.Color(255, 0, 0));

        lblErrorCorreo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblErrorCorreo.setForeground(new java.awt.Color(255, 0, 0));

        lblErrorTelefono.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblErrorTelefono.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addGap(22, 22, 22)
                                                .addComponent(jLabel2))
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addGap(44, 44, 44)
                                                .addComponent(jLabel5)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(7, 7, 7)
                                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                                                        .addComponent(lblIconNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addGap(31, 31, 31)
                                                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                                .addComponent(lblErrorApellido, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                                                                                .addComponent(txtApellido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(lblIconApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGroup(jPanel5Layout.createSequentialGroup()
                                                                        .addComponent(lblIconTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addGap(11, 11, 11)))
                                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                                .addComponent(lblIconIdentificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(239, 239, 239))))
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblIconCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addGap(89, 89, 89)
                                                .addComponent(lblErrorCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addGap(94, 94, 94)
                                                .addComponent(lblErrorNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(lblErrorIdentificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblErrorTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(txtCodigo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblIconIdentificacion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(lblErrorIdentificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                        .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3)
                                        .addComponent(lblIconNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblIconApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(1, 1, 1)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblErrorApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblErrorNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblIconCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(txtCorreo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(1, 1, 1)
                                                .addComponent(lblErrorCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblIconTelefono, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel6)))
                                .addGap(1, 1, 1)
                                .addComponent(lblErrorTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21))
        );

        txtArea.setEditable(false);
        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        panHuellas.setBackground(new java.awt.Color(255, 255, 255));
        panHuellas.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Huella Digital Capturada", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        panHuellas.setPreferredSize(new java.awt.Dimension(400, 270));
        panHuellas.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel4.setLayout(new java.awt.BorderLayout());
        jPanel4.add(lblImagenHuella, java.awt.BorderLayout.CENTER);

        panHuellas.add(jPanel4, java.awt.BorderLayout.CENTER);

        btnRegistrar.setBackground(new java.awt.Color(112, 182, 32));
        btnRegistrar.setForeground(new java.awt.Color(255, 255, 255));
        btnRegistrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/imagenes/icons8-editar-usuario-masculino-24.png"))); // NOI18N
        btnRegistrar.setText("Modificar");
        btnRegistrar.setEnabled(false);
        btnRegistrar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnRegistrar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        panelPrincipal.setBackground(new java.awt.Color(245, 245, 245));
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder2 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder2.setShowRightShadow(false);
        panelPrincipal.setBorder(dropShadowBorder2);

        txtCodigoModificacion.setBackground(MaterialColor.TRANSPARENT);
        txtCodigoModificacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodigoModificacionKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodigoModificacionKeyTyped(evt);
            }
        });

        materialButtonIcon1.setBackground(new java.awt.Color(112, 182, 32));
        materialButtonIcon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/imagenes/icons8-b√∫squeda-14.png"))); // NOI18N
        materialButtonIcon1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                materialButtonIcon1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel4.setText("Codigo:");

        lblError.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblError.setForeground(new java.awt.Color(255, 0, 0));

        materialButtonIcon2.setBackground(new java.awt.Color(112, 182, 32));
        materialButtonIcon2.setForeground(new java.awt.Color(255, 255, 255));
        materialButtonIcon2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/imagenes/icons8-vista-general-3-14.png"))); // NOI18N
        materialButtonIcon2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                materialButtonIcon2MouseClicked(evt);
            }
        });
        materialButtonIcon2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                materialButtonIcon2ActionPerformed(evt);
            }
        });

        comboBoxTipoModificacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todo Los Datos", "Datos de Huella", "Datos Personales" }));
        comboBoxTipoModificacion.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
                panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPrincipalLayout.createSequentialGroup()
                                .addContainerGap(68, Short.MAX_VALUE)
                                .addComponent(comboBoxTipoModificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtCodigoModificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblError, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(materialButtonIcon1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(128, 128, 128)
                                .addComponent(materialButtonIcon2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        panelPrincipalLayout.setVerticalGroup(
                panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelPrincipalLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                                .addGroup(panelPrincipalLayout.createSequentialGroup()
                                                        .addComponent(txtCodigoModificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(3, 3, 3)
                                                        .addComponent(lblError, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(jLabel4)
                                                .addComponent(materialButtonIcon1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(materialButtonIcon2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(comboBoxTipoModificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelRegistrarLayout = new javax.swing.GroupLayout(panelRegistrar);
        panelRegistrar.setLayout(panelRegistrarLayout);
        panelRegistrarLayout.setHorizontalGroup(
                panelRegistrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelRegistrarLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(panelRegistrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panelRegistrarLayout.createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(panelRegistrarLayout.createSequentialGroup()
                                                .addComponent(panHuellas, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(38, 38, 38)
                                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(panelRegistrarLayout.createSequentialGroup()
                                .addComponent(panelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelRegistrarLayout.setVerticalGroup(
                panelRegistrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelRegistrarLayout.createSequentialGroup()
                                .addComponent(panelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(panelRegistrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(panHuellas, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(panelRegistrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panelRegistrarLayout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap())
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRegistrarLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(34, 34, 34))))
        );

        javax.swing.GroupLayout panelContenedorLayout = new javax.swing.GroupLayout(panelContenedor);
        panelContenedor.setLayout(panelContenedorLayout);
        panelContenedorLayout.setHorizontalGroup(
                panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelContenedorLayout.createSequentialGroup()
                                .addComponent(materialButtomPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 819, Short.MAX_VALUE))
                        .addGroup(panelContenedorLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(panelRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelContenedorLayout.setVerticalGroup(
                panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelContenedorLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(panelRegistrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(materialButtomPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        panelTitulo.setBackground(new java.awt.Color(255, 255, 255));
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder3 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder3.setShadowSize(10);
        dropShadowBorder3.setShowRightShadow(false);
        panelTitulo.setBorder(dropShadowBorder3);

        jPanel2.setBackground(new java.awt.Color(112, 182, 32));

        jLabel18.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/imagenes/icons8-editar-usuario-masculino-48.png"))); // NOI18N
        jLabel18.setText("Modificacion ");
        jLabel18.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel18.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Ingenieria del sofware");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/imagenes/logoupcmediano.png"))); // NOI18N

        jPanel1.setBackground(new java.awt.Color(75, 146, 45));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 18, Short.MAX_VALUE)
        );

        jLabel7.setFont(new java.awt.Font("Segoe UI Semilight", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel18)
                                                .addGap(54, 54, 54)
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 539, Short.MAX_VALUE)
                                                .addComponent(jLabel13))
                                        .addComponent(jLabel17))
                                .addGap(31, 31, 31))
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(jLabel7)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(8, 8, 8)
                                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 8, Short.MAX_VALUE)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 9, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelTituloLayout = new javax.swing.GroupLayout(panelTitulo);
        panelTitulo.setLayout(panelTituloLayout);
        panelTituloLayout.setHorizontalGroup(
                panelTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelTituloLayout.setVerticalGroup(
                panelTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panelContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, 922, Short.MAX_VALUE)
                        .addComponent(panelTitulo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(panelTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(panelContenedor, javax.swing.GroupLayout.PREFERRED_SIZE, 539, Short.MAX_VALUE)
                                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void panelRegistrarComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_panelRegistrarComponentShown
        // TODO add your handling code here:
        btnRegistrar.setEnabled(false);
    }//GEN-LAST:event_panelRegistrarComponentShown

    private void txtTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTelefonoActionPerformed

    private void materialButtomPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_materialButtomPanel3MouseClicked
        // TODO add your handling code here:
        _formularioInstanciador.setVisible(true);
        this.dispose();
        if (DPFP.Lector.isStarted()) {
            DPFP.Lector.stopCapture();
            DPFP.Reclutador.clear();
        }
    }//GEN-LAST:event_materialButtomPanel3MouseClicked
    boolean codigoValido = false;
    private void txtCodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodigoFocusLost
        // TODO add your handling code here:

        if (txtCodigo.getText().isEmpty()) {
            txtCodigo.setBackground(new Color(253, 227, 227));
            ///txtCodigo.setBackground(Color.red);
            lblIconIdentificacion.setIcon(iconoError);
            codigoValido = false;
            lblErrorIdentificacion.setText("Campo vacio");
        } else if (txtCodigo.getText().length() < 8 || txtCodigo.getText().length() > 11) {
            txtCodigo.setBackground(new Color(253, 227, 227));
            ///txtCodigo.setBackground(Color.red);
            lblIconIdentificacion.setIcon(iconoError);
            codigoValido = false;
            lblErrorIdentificacion.setText("longitud errada de Codigo");
        } else {
            txtCodigo.setBackground(new Color(0, 0, 0, 0));
            lblIconIdentificacion.setIcon(iconoOk);
            codigoValido = true;
            lblErrorIdentificacion.setText("");
        }
    }//GEN-LAST:event_txtCodigoFocusLost

    private void txtCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoKeyTyped
        // TODO add your handling code here:
        char caracter = evt.getKeyChar();

        // Verificar si la tecla pulsada no es un digito
        if (((caracter < '0') || (caracter > '9')) && (caracter != '.')) {
            evt.consume();  // ignorar el evento de teclado
            Toolkit.getDefaultToolkit().beep();

        }
    }//GEN-LAST:event_txtCodigoKeyTyped
    boolean correValido = false;
    private void txtCorreoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCorreoFocusLost
        // TODO add your handling code here:
        Pattern pattern = Pattern
                .compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
                        + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
        // El email a validar
        String email = txtCorreo.getText();

        Matcher mather = pattern.matcher(email);

        if (txtCorreo.getText().isEmpty()) {
            txtCorreo.setBackground(new Color(253, 227, 227));
            ///txtCorreo.setBackground(Color.red);t
            lblIconCorreo.setIcon(iconoError);
            correValido = false;
        }
        if (mather.find() != true) {
            txtCorreo.setBackground(new Color(253, 227, 227));
            //txtCorreo.setBackground(Color.red);
            lblIconCorreo.setIcon(iconoError);
            correValido = false;
            lblErrorCorreo.setText("Escribe Correo valido");
        } else {
            txtCorreo.setBackground(new Color(0, 0, 0, 0));
            ///txtCorreo.setBackground(new Color(0, 0, 0,0));
            lblIconCorreo.setIcon(iconoOk);
            correValido = true;
            lblErrorCorreo.setText("");

        }
    }//GEN-LAST:event_txtCorreoFocusLost
    boolean nombreValido = false;
    private void txtNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNombreFocusLost
        // TODO add your handling code here:
        if (txtNombre.getText().isEmpty()) {
            txtNombre.setBackground(new Color(253, 227, 227));
            lblIconNombre.setIcon(iconoError);
            nombreValido = false;
        } else {
            txtNombre.setBackground(new Color(0, 0, 0, 0));
            ///txtNombre.setBackground(new Color(0, 0, 0,0));
            lblIconNombre.setIcon(iconoOk);
            nombreValido = true;
        }
    }//GEN-LAST:event_txtNombreFocusLost
    boolean apellidoValido = false;
    private void txtApellidoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtApellidoFocusLost
        // TODO add your handling code here:
        // comprueba que no contenga caracteres prohibidos

        if (txtApellido.getText().isEmpty()) {
            txtApellido.setBackground(new Color(253, 227, 227));
            ///txtApellido.setBackground(Color.red);
            lblIconApellido.setIcon(iconoError);
            apellidoValido = false;
        } else {
            txtApellido.setBackground(new Color(0, 0, 0, 0));
            ///txtApellido.setBackground(new Color(0, 0, 0,0));
            lblIconApellido.setIcon(iconoOk);
            apellidoValido = true;
        }
    }//GEN-LAST:event_txtApellidoFocusLost
    boolean telefonoValido = false;
    private void txtTelefonoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTelefonoFocusLost
        // TODO add your handling code here:

        if (txtTelefono.getText().isEmpty()) {
            txtTelefono.setBackground(new Color(253, 227, 227));
            //lblIconTelefono.setIcon(new ImageIcon("src/vista/imagenes/icons8-error-14.png"));
            ///txtTelefono.setBackground(Color.red);
            lblIconTelefono.setIcon(iconoError);

            telefonoValido = false;
        } else {
            txtTelefono.setBackground(new Color(0, 0, 0, 0));
            //lblIconTelefono.setIcon(new ImageIcon("src/vista/imagenes/icons8-ok-14.png"));
            ///txtTelefono.setBackground(new Color(0, 0, 0,0));
            lblIconTelefono.setIcon(iconoOk);
            telefonoValido = true;
        }
    }//GEN-LAST:event_txtTelefonoFocusLost

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        // Verificar si la tecla pulsada no es un digito

        if (!Character.isLetter(evt.getKeyChar())
                && !(evt.getKeyChar() == KeyEvent.VK_SPACE)
                && !(evt.getKeyChar() == KeyEvent.VK_BACK_SPACE)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            lblErrorNombre.setText("Escribe solo letras");
        } else {
            lblErrorNombre.setText("");
        }
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtApellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidoKeyTyped
        // TODO add your handling code here
        if (!Character.isLetter(evt.getKeyChar()) && !(evt.getKeyChar() == KeyEvent.VK_SPACE) && !(evt.getKeyChar() == KeyEvent.VK_BACK_SPACE)) {
            Toolkit.getDefaultToolkit().beep();
            lblErrorApellido.setText("Escribe solo letras");
            evt.consume();
        } else {
            lblErrorApellido.setText("");
        }
    }//GEN-LAST:event_txtApellidoKeyTyped

    private void txtTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoKeyTyped
        // TODO add your handling code here:
        char caracter = evt.getKeyChar();

        // Verificar si la tecla pulsada no es un digito
        if (((caracter < '0') || (caracter > '9')) && (caracter != '+')) {
            evt.consume();  // ignorar el evento de teclado
            Toolkit.getDefaultToolkit().beep();
            lblErrorTelefono.setText("Escribe telefono valido");
        } else if (txtTelefono.getText().length() < 7 || txtTelefono.getText().length() < 7) {
            evt.consume();  // ignorar el evento de teclado
            Toolkit.getDefaultToolkit().beep();
            lblErrorTelefono.setText("Cantidad de deigitos incorrecta");
        } else if (!(evt.getKeyChar() == KeyEvent.VK_SPACE) && !(evt.getKeyChar() == KeyEvent.VK_BACK_SPACE)) {
            evt.consume();  // ignorar el evento de teclado
            Toolkit.getDefaultToolkit().beep();
            lblErrorTelefono.setText("Escribe telefono valido");
        } else {
            lblErrorTelefono.setText("");
            telefonoValido = true;
        }
    }//GEN-LAST:event_txtTelefonoKeyTyped

    private void txtCorreoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCorreoKeyTyped

    }//GEN-LAST:event_txtCorreoKeyTyped

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:

    }//GEN-LAST:event_formWindowOpened

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // TODO add your handling code here:
        if (grupo != null) {
            if (validarCampos()) {

                modificarEstudiante();
                DPFP.Lector.stopCapture();
                DPFP.Reclutador.clear();
                lblImagenHuella.setIcon(null);
                start();

            }
        } else {
            JOptionPane.showMessageDialog(this, "No existe un grupo asosciado Para realizar el registro", "Error de grupo", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        _formularioInstanciador.setVisible(true);
        if (DPFP.Lector.isStarted()) {
            DPFP.Lector.stopCapture();
            DPFP.Reclutador.clear();
        }
    }//GEN-LAST:event_formWindowClosing

    private void txtCodigoModificacionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoModificacionKeyReleased

    }//GEN-LAST:event_txtCodigoModificacionKeyReleased

    private void materialButtonIcon1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_materialButtonIcon1ActionPerformed
        // TODO add your handling code here:
        MetodosDao m = new MetodosDao();
        if (txtCodigoModificacion.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo Codigo No puede estar vacio\n Por favor digita un codigo para continuar", "Campo en Blanco", JOptionPane.WARNING_MESSAGE);
        } else {
            if (m.validarCodigo(txtCodigoModificacion.getText(),(grupo.split(":")[1]).trim()) == 1) {

                cargarFormulario(txtCodigoModificacion.getText());

                habilitarFormulario();
                lblError.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "El Codigo no existe\nPor favor, digite un codigo existente", "Codigo erroneo", JOptionPane.ERROR_MESSAGE);
                lblError.setText("No existe ningun registro");
            }
        }
    }//GEN-LAST:event_materialButtonIcon1ActionPerformed

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void txtCodigoModificacionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoModificacionKeyTyped
        char caracter = evt.getKeyChar();

        // Verificar si la tecla pulsada no es un digito
        if (((caracter < '0') || (caracter > '9')) && (caracter != '.')) {
            evt.consume();  // ignorar el evento de teclado
            Toolkit.getDefaultToolkit().beep();
            lblError.setText("Escribe solo numeros");
        } else {
            lblError.setText("");
        }

    }//GEN-LAST:event_txtCodigoModificacionKeyTyped

    private void materialButtonIcon2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_materialButtonIcon2ActionPerformed
        // TODO add your handling code here:

        frmListadoEstudiante frm = new frmListadoEstudiante(this);
        frm.grupo = grupo;
        frm.setExtendedState(MAXIMIZED_BOTH);
        frm.setVisible(true);
        frm.modificar = true;

    }//GEN-LAST:event_materialButtonIcon2ActionPerformed

    private void materialButtonIcon2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_materialButtonIcon2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_materialButtonIcon2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmModificarEstudiante.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmModificarEstudiante.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmModificarEstudiante.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmModificarEstudiante.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmModificarEstudiante(_formularioInstanciador).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private MaterialButtonIcon btnRegistrar;
    private MaterialComboBox comboBoxTipoModificacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblError;
    private javax.swing.JLabel lblErrorApellido;
    private javax.swing.JLabel lblErrorCorreo;
    private javax.swing.JLabel lblErrorIdentificacion;
    private javax.swing.JLabel lblErrorNombre;
    private javax.swing.JLabel lblErrorTelefono;
    private javax.swing.JLabel lblIconApellido;
    private javax.swing.JLabel lblIconCorreo;
    private javax.swing.JLabel lblIconIdentificacion;
    private javax.swing.JLabel lblIconNombre;
    private javax.swing.JLabel lblIconTelefono;
    private javax.swing.JLabel lblImagenHuella;
    private MaterialButtomPanel materialButtomPanel3;
    private MaterialButtonIcon materialButtonIcon1;
    private MaterialButtonIcon materialButtonIcon2;
    private javax.swing.JPanel panHuellas;
    private javax.swing.JPanel panelContenedor;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JPanel panelRegistrar;
    private javax.swing.JPanel panelTitulo;
    private MaterialTextField txtApellido;
    private javax.swing.JTextArea txtArea;
    private MaterialTextField txtCodigo;
    private MaterialTextField txtCodigoModificacion;
    private MaterialTextField txtCorreo;
    private MaterialTextField txtNombre;
    private MaterialTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

    //Variable que para crear el template de la huella luego de que se hallan creado las caracteriticas
// necesarias de la huella si no ha ocurrido ningun problema
    private DPFPTemplate template;
    public static String TEMPLATE_PROPERTY = "template";

    protected void Iniciar() {
        DPFP.Lector.addDataListener(new DPFPDataAdapter() {
            @Override
            public void dataAcquired(final DPFPDataEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("La Huella Digital ha sido Capturada");
                        ProcesarCaptura(e.getSample());
                    }
                });
            }
        });

        DPFP.Lector.addReaderStatusListener(new DPFPReaderStatusAdapter() {
            @Override
            public void readerConnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("El Sensor de Huella Digital esta Activado o Conectado");
                    }
                });
            }

            @Override
            public void readerDisconnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("El Sensor de Huella Digital esta Desactivado o no Conectado");
                    }
                });
            }
        });

        DPFP.Lector.addSensorListener(new DPFPSensorAdapter() {
            @Override
            public void fingerTouched(final DPFPSensorEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("El dedo ha sido colocado sobre el DPFP.Lector de Huella");
                    }
                });
            }

            @Override
            public void fingerGone(final DPFPSensorEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("El dedo ha sido quitado del DPFP.Lector de Huella");
                    }
                });
            }
        });

        DPFP.Lector.addErrorListener(new DPFPErrorAdapter() {
            public void errorReader(final DPFPErrorEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("Error: " + e.getError());
                    }
                });
            }
        });
    }

    public DPFPFeatureSet featuresinscripcion;
    public DPFPFeatureSet featuresverificacion;

    public void ProcesarCaptura(DPFPSample sample) {

        // Procesar la muestra de la huella y crear un conjunto de caracter√≠sticas con el prop√≥sito de inscripci√≥n.
        featuresinscripcion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);

        // Procesar la muestra de la huella y crear un conjunto de caracter√≠sticas con el prop√≥sito de verificacion.
        featuresverificacion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);

        // Comprobar la calidad de la muestra de la huella y lo a√±ade a su reclutador si es bueno
        if (featuresinscripcion != null) {
            try {
                System.out.println("Las Caracteristicas de la Huella han sido creada");
                DPFP.Reclutador.addFeatures(featuresinscripcion);// Agregar las caracteristicas de la huella a la plantilla a crear

                // Dibuja la huella dactilar capturada.
                Image image = CrearImagenHuella(sample);
                DibujarHuella(image);

//                btnVerificar.setEnabled(true);
//                btnIdentificar.setEnabled(true);
            } catch (DPFPImageQualityException ex) {
                System.err.println("Error: " + ex.getMessage());
            } finally {
                EstadoHuellas();
                // Comprueba si la plantilla se ha creado.
                switch (DPFP.Reclutador.getTemplateStatus()) {
                    case TEMPLATE_STATUS_READY:	// informe de √©xito y detiene  la captura de huellas
                        stop();
                        setTemplate(DPFP.Reclutador.getTemplate());
                        EnviarTexto("La Plantilla de la Huella ha Sido Creada");
//                        btnIdentificar.setEnabled(false);
//                        btnVerificar.setEnabled(false);
//                        btnGuardar.setEnabled(true);
//                        btnGuardar.grabFocus();
                        break;

                    case TEMPLATE_STATUS_FAILED: // informe de fallas y reiniciar la captura de huellas
                        DPFP.Reclutador.clear();
                        stop();
                        EstadoHuellas();
                        setTemplate(null);
                        JOptionPane.showMessageDialog(frmModificarEstudiante.this, "La Plantilla de la Huella no pudo ser creada, Repita el Proceso", "Inscripcion de Huellas Dactilares", JOptionPane.ERROR_MESSAGE);
                        start();
                        break;
                }
            }
        }
    }

    public DPFPFeatureSet extraerCaracteristicas(DPFPSample sample, DPFPDataPurpose purpose) {
        DPFPFeatureExtraction extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
        try {
            return extractor.createFeatureSet(sample, purpose);
        } catch (DPFPImageQualityException e) {
            return null;
        }
    }

    public Image CrearImagenHuella(DPFPSample sample) {
        return DPFPGlobal.getSampleConversionFactory().createImage(sample);
    }

    public void DibujarHuella(Image image) {
        lblImagenHuella.setIcon(new ImageIcon(
                image.getScaledInstance(lblImagenHuella.getWidth(), lblImagenHuella.getHeight(), Image.SCALE_DEFAULT)));
        repaint();
    }

    public void EstadoHuellas() {
        EnviarTexto("Muestra de Huellas Necesarias para Guardar Template " + DPFP.Reclutador.getFeaturesNeeded());
    }

    public void EnviarTexto(String string) {
        txtArea.append(string + "\n");
    }

    public void start() {
        DPFP.Lector.startCapture();
        EnviarTexto("Utilizando el DPFP.Lector de Huella Dactilar ");
    }

    public void stop() {
        DPFP.Lector.stopCapture();
        EnviarTexto("No se est√° usando el DPFP.Lector de Huella Dactilar ");
    }

    public DPFPTemplate getTemplate() {
        return template;
    }

    public void setTemplate(DPFPTemplate template) {
        DPFPTemplate old = this.template;
        this.template = template;
        firePropertyChange(TEMPLATE_PROPERTY, old, template);
    }

    ConexionBD con = new ConexionBD();

    /*
     * Guarda los datos de la huella digital actual en la base de datos
     */
    public void modificarEstudiante() {
        String sql;
        String op = comboBoxTipoModificacion.getSelectedItem().toString();
        switch (op) {
            case "Todos Los Datos":
                sql = "UPDATE estudiante SET codigo=?,nombre=?,apellido=?,correo=?,telefono=?,huella=?,grupo_codigo=? WHERE codigo=?";
                modificarTodo(sql);
                break;
            case "Datos de Huella":
                sql = "UPDATE estudiante SET huella=? WHERE codigo=?";
                modificarHuella(sql);
                break;
            case "Datos Personales":
                sql = "UPDATE estudiante SET codigo=?,nombre=?,apellido=?,correo=?,telefono=? WHERE codigo=?";
                modificarDatosPersonales(sql);
                break;
            default:
                throw new AssertionError();
        }
    }

    void modificarTodo(String Sql) throws HeadlessException {
        //Obtiene los datos del template de la huella actual
        if (DPFP.Reclutador.getTemplateStatus() == DPFPTemplateStatus.TEMPLATE_STATUS_UNKNOWN) {
            JOptionPane.showMessageDialog(this, "No has registrado Huella");
        } else {

            ByteArrayInputStream datosHuella = new ByteArrayInputStream(template.serialize());
            Integer tama√±oHuella = template.serialize().length;

            //datos de la persona a la cual corresponde dicha huella
            String codigo = this.txtCodigo.getText();
            String nombre = this.txtNombre.getText();
            String apellido = this.txtApellido.getText();
            String correo = this.txtCorreo.getText();
            String telefono = this.txtTelefono.getText();
            String grupo_codigo = (grupo.split(":")[1]).trim();
            System.out.println("datosHuella:" + datosHuella);

            try {
                //Establece los valores para la sentencia SQL
                Connection c = con.conectar(); //establece la conexion con la BD

                PreparedStatement guardarStmt = c.prepareStatement(Sql);

                guardarStmt.setString(1, codigo);
                guardarStmt.setString(2, nombre);
                guardarStmt.setString(3, apellido);
                guardarStmt.setString(4, correo);
                guardarStmt.setString(5, telefono);
                guardarStmt.setBinaryStream(6, datosHuella, tama√±oHuella);
                guardarStmt.setString(7, grupo_codigo);
                guardarStmt.setString(8, codigoEstudiante);
                //Ejecuta la sentencia
                guardarStmt.execute();
                guardarStmt.close();
                JOptionPane.showMessageDialog(null, "Estudiante Modificado Correctamente");
                con.desconectar();
                restablecerFormulario();
            } catch (SQLException ex) {
                //Si ocurre un error lo indica en la consola
                System.err.println("Error al Modificar los datos del estudiante.");
                JOptionPane.showMessageDialog(this, "Error al guardar los datos del estudiante");
                System.err.println("Mas detalle " + ex);
            } finally {
                con.desconectar();
            }
        }
    }

    void modificarHuella(String Sql) throws HeadlessException {
        //Obtiene los datos del template de la huella actual
        if (DPFP.Reclutador.getTemplateStatus() == DPFPTemplateStatus.TEMPLATE_STATUS_UNKNOWN) {
            JOptionPane.showMessageDialog(this, "No has registrado Huella");
        } else {

            ByteArrayInputStream datosHuella = new ByteArrayInputStream(template.serialize());
            Integer tama√±oHuella = template.serialize().length;

            System.out.println("datosHuella:" + datosHuella);

            try {
                //Establece los valores para la sentencia SQL
                Connection c = con.conectar(); //establece la conexion con la BD

                PreparedStatement guardarStmt = c.prepareStatement(Sql);

                guardarStmt.setBinaryStream(1, datosHuella, tama√±oHuella);
                guardarStmt.setString(2, codigoEstudiante);
                //Ejecuta la sentencia
                guardarStmt.execute();
                guardarStmt.close();
                JOptionPane.showMessageDialog(null, "Huella Modificada Correctamente");
                con.desconectar();
                restablecerFormulario();
            } catch (SQLException ex) {
                //Si ocurre un error lo indica en la consola
                System.err.println("Error al Modificar los datos del estudiante.");
                JOptionPane.showMessageDialog(this, "Error al guardar los datos del estudiante");
                System.err.println("Mas detalle " + ex);
            } finally {
                con.desconectar();
            }
        }
    }

    void modificarDatosPersonales(String Sql) throws HeadlessException {
        //Obtiene los datos del template de la huella actual

        //datos de la persona a la cual corresponde dicha huella
        String codigo = this.txtCodigo.getText();
        String nombre = this.txtNombre.getText();
        String apellido = this.txtApellido.getText();
        String correo = this.txtCorreo.getText();
        String telefono = this.txtTelefono.getText();

        try {
            //Establece los valores para la sentencia SQL
            Connection c = con.conectar(); //establece la conexion con la BD

            PreparedStatement guardarStmt = c.prepareStatement(Sql);

            guardarStmt.setString(1, codigo);
            guardarStmt.setString(2, nombre);
            guardarStmt.setString(3, apellido);
            guardarStmt.setString(4, correo);
            guardarStmt.setString(5, telefono);
            guardarStmt.setString(6, codigoEstudiante);
            //Ejecuta la sentencia
            guardarStmt.execute();
            guardarStmt.close();
            JOptionPane.showMessageDialog(null, "Datos Personales Modificado Correctamente");
            con.desconectar();
            restablecerFormulario();
        } catch (SQLException ex) {
            //Si ocurre un error lo indica en la consola
            System.err.println("Error al Modificar los datos del estudiante.");
            JOptionPane.showMessageDialog(this, "Error al guardar los datos del estudiante", "error de modificacion", JOptionPane.ERROR_MESSAGE);
            System.err.println("Mas detalle " + ex);
        } finally {
            con.desconectar();
        }

    }

    /**
     * Identifica a una persona registrada por medio de su huella digital
     */
    public boolean identificarHuella() throws IOException {
        try {
            //Establece los valores para la sentencia SQL
            Connection c = con.conectar();

            //Obtiene todas las huellas de la bd
            PreparedStatement identificarStmt = c.prepareStatement("SELECT * FROM estudiante");
            ResultSet rs = identificarStmt.executeQuery();

            //Si se encuentra el nombre en la base de datos
            while (rs.next()) {
                //Lee la plantilla de la base de datos
                byte templateBuffer[] = rs.getBytes("huella");
                String nombre = rs.getString("nombre");
                //Crea una nueva plantilla a partir de la guardada en la base de datos
                DPFPTemplate referenceTemplate = DPFPGlobal.getTemplateFactory().createTemplate(templateBuffer);
                //Envia la plantilla creada al objeto contendor de Template del componente de huella digital
                setTemplate(referenceTemplate);

                // Compara las caracteriticas de la huella recientemente capturda con la
                // alguna plantilla guardada en la base de datos que coincide con ese tipo
                DPFPVerificationResult result = DPFP.Verificador.verify(featuresverificacion, getTemplate());

                //compara las plantilas (actual vs bd)
                //Si encuentra correspondencia dibuja el mapa
                //e indica el nombre de la persona que coincidi√≥.
                if (result.isVerified()) {
                    //crea la imagen de los datos guardado de las huellas guardadas en la base de datos
                    JOptionPane.showMessageDialog(null, "Las huella capturada ya esta registrada, es de " + nombre, "Verificacion de Huella", JOptionPane.ERROR_MESSAGE);
                    return true;
                }
            }

        } catch (SQLException e) {
            //Si ocurre un error lo indica en la consola
            System.err.println("Error al identificar huella dactilar." + e.getMessage());
        } finally {
            con.desconectar();
        }
        return false;
    }

    private boolean validarCampos() {
        if (txtCodigo.getText().isEmpty()) {
            txtCodigo.setBackground(new Color(253, 227, 227));
            ///txtCodigo.setBackground(Color.red);
            lblIconIdentificacion.setIcon(iconoError);
            codigoValido = false;
            lblErrorIdentificacion.setText("Campo vacio");
        } else if (txtCodigo.getText().length() < 8 || txtCodigo.getText().length() > 11) {
            txtCodigo.setBackground(new Color(253, 227, 227));
            ///txtCodigo.setBackground(Color.red);
            lblIconIdentificacion.setIcon(iconoError);
            codigoValido = false;
            lblErrorIdentificacion.setText("longitud errada de Codigo");
        } else {
            txtCodigo.setBackground(new Color(0, 0, 0, 0));
            lblIconIdentificacion.setIcon(iconoOk);
            codigoValido = true;
            lblErrorIdentificacion.setText("");
        }

        Pattern pattern = Pattern
                .compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
                        + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
        // El email a validar
        String email = txtCorreo.getText();

        Matcher mather = pattern.matcher(email);

        if (txtCorreo.getText().isEmpty()) {
            txtCorreo.setBackground(new Color(253, 227, 227));
            ///txtCorreo.setBackground(Color.red);t
            lblIconCorreo.setIcon(iconoError);
            correValido = false;
        }
        if (mather.find() != true) {
            txtCorreo.setBackground(new Color(253, 227, 227));
            //txtCorreo.setBackground(Color.red);
            lblIconCorreo.setIcon(iconoError);
            correValido = false;
            lblErrorCorreo.setText("Escribe Correo valido");
        } else {
            txtCorreo.setBackground(new Color(0, 0, 0, 0));
            ///txtCorreo.setBackground(new Color(0, 0, 0,0));
            lblIconCorreo.setIcon(iconoOk);
            correValido = true;
            lblErrorCorreo.setText("");

        }
        if (txtNombre.getText().isEmpty()) {
            txtNombre.setBackground(new Color(253, 227, 227));
            lblIconNombre.setIcon(iconoError);
            nombreValido = false;
        } else {
            txtNombre.setBackground(new Color(0, 0, 0, 0));
            ///txtNombre.setBackground(new Color(0, 0, 0,0));
            lblIconNombre.setIcon(iconoOk);
            nombreValido = true;
        }

        if (txtApellido.getText().isEmpty()) {
            txtApellido.setBackground(new Color(253, 227, 227));
            ///txtApellido.setBackground(Color.red);
            lblIconApellido.setIcon(iconoError);
            apellidoValido = false;
        } else {
            txtApellido.setBackground(new Color(0, 0, 0, 0));
            ///txtApellido.setBackground(new Color(0, 0, 0,0));
            lblIconApellido.setIcon(iconoOk);
            apellidoValido = true;
        }

        if (txtApellido.getText().isEmpty()) {
            txtApellido.setBackground(new Color(253, 227, 227));
            ///txtApellido.setBackground(Color.red);
            lblIconApellido.setIcon(iconoError);
            apellidoValido = false;
        } else {
            txtApellido.setBackground(new Color(0, 0, 0, 0));
            ///txtApellido.setBackground(new Color(0, 0, 0,0));
            lblIconApellido.setIcon(iconoOk);
            apellidoValido = true;
        }
        if (txtTelefono.getText().isEmpty()) {
            txtTelefono.setBackground(new Color(253, 227, 227));
            //lblIconTelefono.setIcon(new ImageIcon("src/vista/imagenes/icons8-error-14.png"));
            ///txtTelefono.setBackground(Color.red);
            lblIconTelefono.setIcon(iconoError);

            telefonoValido = false;
        } else {
            txtTelefono.setBackground(new Color(0, 0, 0, 0));
            //lblIconTelefono.setIcon(new ImageIcon("src/vista/imagenes/icons8-ok-14.png"));
            ///txtTelefono.setBackground(new Color(0, 0, 0,0));
            lblIconTelefono.setIcon(iconoOk);
            telefonoValido = true;
        }

        if (!codigoValido) {
            JOptionPane.showMessageDialog(this, "el campo codigo tiene errores o esta vacio", "error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (!nombreValido) {
            JOptionPane.showMessageDialog(this, "el campo nombre tiene errores o esta vacio", "error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (!apellidoValido) {
            JOptionPane.showMessageDialog(this, "el campo apellido tiene errores o esta vacio", "error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (!correValido) {
            JOptionPane.showMessageDialog(this, "el campo correo tiene errores o esta vacio", "error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (!telefonoValido) {
            JOptionPane.showMessageDialog(this, "el campo telefono tiene errores o esta vacio", "error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else {
            return true;
        }
    }

    private void restablecerFormulario() {
        this.txtCodigo.setText("");
        this.txtNombre.setText("");
        this.txtApellido.setText("");
        this.txtCorreo.setText("");
        this.txtTelefono.setText("");
        this.lblIconIdentificacion.setIcon(null);
        this.lblIconNombre.setIcon(null);
        this.lblIconApellido.setIcon(null);
        this.lblIconCorreo.setIcon(null);
        this.lblIconTelefono.setIcon(null);
    }

    void habilitarFormulario() {
        this.txtCodigo.setEnabled(true);
        this.txtNombre.setEnabled(true);
        this.txtApellido.setEnabled(true);
        this.txtCorreo.setEnabled(true);
        this.txtTelefono.setEnabled(true);
        btnRegistrar.setEnabled(true);
        if (DPFP.Lector.isStarted()) {
            stop();
            DPFP.Reclutador.clear();

        }
        Iniciar();
        start();
        EstadoHuellas();

    }

    @Override
    public void recibirCodigo(String texto) {
        codigoEstudiante = texto;
        cargarFormulario(texto);
        habilitarFormulario();
    }

    void cargarFormulario(String codigo) {

        try {

            //Establece los valores para la sentencia SQL
            Connection c = con.conectar();

            //Obtiene todas las huellas de la bd
            PreparedStatement consultarStmt = c.prepareStatement("SELECT * FROM estudiante WHERE codigo=? AND grupo_codigo=?");
            consultarStmt.setString(1, codigo);
            System.out.println("grupo " + grupo);
            consultarStmt.setString(2, (grupo.split(":")[1]).trim());
            ResultSet rs = consultarStmt.executeQuery();

            //Si se encuentra el nombre en la base de datos
            while (rs.next()) {
                //Lee la plantilla de la base de datos
                byte templateBuffer[] = rs.getBytes("huella");
                this.txtCodigo.setText(rs.getString("codigo"));
                this.txtNombre.setText(rs.getString("nombre"));
                this.txtApellido.setText(rs.getString("apellido"));
                this.txtCorreo.setText(rs.getString("correo"));
                this.txtTelefono.setText(rs.getString("telefono"));
                //Crea una nueva plantilla a partir de la guardada en la base de datos

            }

        } catch (SQLException e) {
            //Si ocurre un error lo indica en la consola
            System.err.println("Error al identificar huella dactilar." + e.getMessage());
        } finally {
            con.desconectar();
        }

    }

}
